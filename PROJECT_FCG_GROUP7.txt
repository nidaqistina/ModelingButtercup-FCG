#include <Windows.h>
#include <gl/glut.h>
#include <math.h>
#include <vector>
#include <fstream>

#define M_PI 3.142

float angle = 0.0f;
float angleX = 0.0f;
float angleY = 0.0f;
float lx = 0.0f, lz = -1.0f;
float x = 0.0f, z = 5.0f;
float y = 1.0f;
float handRotation = 0.0f;
float fly = 0.0f;
bool flyIncreasing = true;

const float handRotationMin = -160.0f; // Minimum limit for hand rotation
const float handRotationMax = 160.0f;  // Maximum limit for hand rotation
const float flyMin = 1.3f;            // Minimum limit for fly height
const float flyMax = 2.5f;            // Maximum limit for fly height
GLUquadric* IDquadric;

float deltaAngle = 0.0f;
float deltaMove = 0;
float deltaMoveY = 0;
float deltaStrafe = 0.0f;
int xOrigin = 0;
int yOrigin = 0;

static int window;
static int menu_id;
static int value = 2;

void changeSize(int w, int h)
{
	if (h == 0)
		h = 1;

	float ratio = w * 1.0 / h;

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glViewport(0, 0, w, h);
	gluPerspective(45.0f, ratio, 0.1f, 100.0f);
	glMatrixMode(GL_MODELVIEW);
}

void drawHemisphere(float radius, int slices, int stacks) {
	// Draw the upper half of a sphere (hemisphere)
	glPushMatrix();
	for (int i = 0; i < stacks / 2; ++i) {
		float theta1 = i * M_PI / stacks;
		float theta2 = (i + 1) * M_PI / stacks;

		glBegin(GL_QUAD_STRIP);
		for (int j = 0; j <= slices; ++j) {
			float phi = (j * 2) * M_PI / slices;
			float x1 = radius * sin(theta1) * cos(phi);
			float y1 = radius * cos(theta1);
			float z1 = radius * sin(theta1) * sin(phi);
			float x2 = radius * sin(theta2) * cos(phi);
			float y2 = radius * cos(theta2);
			float z2 = radius * sin(theta2) * sin(phi);
			glVertex3f(x1, y1, z1);
			glVertex3f(x2, y2, z2);
		}
		glEnd();
	}
	glPopMatrix();
}

void drawPyramid()
{
	glBegin(GL_TRIANGLES);
	// Front face
	glVertex3f(0.0f, 1.0f, 0.75f); // Apex
	glVertex3f(-1.0f, -1.0f, 1.0f); // Bottom left
	glVertex3f(1.0f, -1.0f, 1.0f); // Bottom right

	// Right face
	glVertex3f(0.0f, 1.0f, 0.0f); // Apex
	glVertex3f(1.0f, -1.0f, 1.0f); // Bottom left
	glVertex3f(1.0f, -1.0f, -1.0f); // Bottom right

	// Back face
	glVertex3f(0.0f, 1.0f, 0.0f); // Apex
	glVertex3f(1.0f, -1.0f, -1.0f); // Bottom left
	glVertex3f(-1.0f, -1.0f, -1.0f); // Bottom right

	// Left face
	glVertex3f(0.0f, 1.0f, 0.0f); // Apex
	glVertex3f(-1.0f, -1.0f, -1.0f); // Bottom left
	glVertex3f(-1.0f, -1.0f, 1.0f); // Bottom right
	glEnd();

	glBegin(GL_QUADS);
	// Bottom face
	glVertex3f(-1.0f, -1.0f, 1.0f); // Bottom left
	glVertex3f(1.0f, -1.0f, 1.0f); // Bottom right
	glVertex3f(1.0f, -1.0f, -1.0f); // Top right
	glVertex3f(-1.0f, -1.0f, -1.0f); // Top left
	glEnd();

}
void drawSideHair(float width, float height, float thickness) {
	glBegin(GL_QUADS);
	// Base rectangle
	glVertex3f(-width / 2, 0.0f, thickness / 2);
	glVertex3f(width / 2, 0.0f, thickness / 2);
	glVertex3f(width / 2, 0.0f, -thickness / 2);
	glVertex3f(-width / 2, 0.0f, -thickness / 2);
	glEnd();

	glBegin(GL_TRIANGLES);
	// Front triangle
	glVertex3f(0.0f, height, 0.0f); // Top vertex
	glVertex3f(-width / 2, 0.0f, thickness / 2); // Bottom left vertex
	glVertex3f(width / 2, 0.0f, thickness / 2); // Bottom right vertex

	// Back triangle
	glVertex3f(0.0f, height, 0.0f); // Top vertex
	glVertex3f(width / 2, 0.0f, -thickness / 2); // Bottom right vertex
	glVertex3f(-width / 2, 0.0f, -thickness / 2); // Bottom left vertex

	// Left triangle
	glVertex3f(0.0f, height, 0.0f); // Top vertex
	glVertex3f(-width / 2, 0.0f, -thickness / 2); // Bottom left vertex
	glVertex3f(-width / 2, 0.0f, thickness / 2); // Bottom right vertex

	// Right triangle
	glVertex3f(0.0f, height, 0.0f); // Top vertex
	glVertex3f(width / 2, 0.0f, thickness / 2); // Bottom left vertex
	glVertex3f(width / 2, 0.0f, -thickness / 2); // Bottom right vertex
	glEnd();
}

void drawSmile() {
	float radius = 0.3;
	int num_segments = 100;
	float angle_start = M_PI / 6; // Start angle
	float angle_end = 5 * M_PI / 6; // End angle

	glBegin(GL_LINE_STRIP);
	for (int i = 0; i <= num_segments; ++i) {
		float angle = angle_start + (angle_end - angle_start) * i / num_segments;
		float x = radius * cos(angle);
		float y = radius * sin(angle);
		glVertex3f(x, y, 0);
	}
	glEnd();
}

void drawHead()
{
	// head
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f);
	glTranslatef(0.0f, 1.0f, 0.0f);
	glutSolidSphere(0.7, 20, 20);
	glPopMatrix();

	//hair base
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Color for the hair
	glTranslatef(0.0f, 1.1f, -0.05f); // Position the hemisphere
	drawHemisphere(0.76, 20, 20);
	glPopMatrix();

	//hair back
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Color for the hair
	glTranslatef(0.0f, 1.1f, -0.05f); // Position the hemisphere
	glRotatef(270.0f, 1.0f, 0.0f, 0.0f);
	drawHemisphere(0.76, 20, 20);
	glPopMatrix();

	//haircut
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f);
	glTranslatef(0.0f, 1.23f, 0.6f);
	glScalef(0.13, 0.13, 0.13);
	drawPyramid();
	glPopMatrix();

	// eyes white
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);
	glTranslatef(-0.2f, 1.0f, 0.5f);
	glRotatef(170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.3, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);
	glTranslatef(0.2f, 1.0f, 0.5f);
	glRotatef(-170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.3, 20, 20);
	glPopMatrix();

	// eyes green
	glPushMatrix();
	glColor3f(0.0f, 1.0f, 0.0f);
	glTranslatef(-0.2f, 1.0f, 0.58f);
	glRotatef(170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.25, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0f, 1.0f, 0.0f);
	glTranslatef(0.2f, 1.0f, 0.58f);
	glRotatef(-170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.25, 20, 20);
	glPopMatrix();

	// eyes black
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f);
	glTranslatef(-0.2f, 1.0f, 0.7f);
	glRotatef(170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.15, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f);
	glTranslatef(0.2f, 1.0f, 0.7f);
	glRotatef(-170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.15, 20, 20);
	glPopMatrix();

	// eyes white
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);
	glTranslatef(-0.21f, 1.0f, 0.81f);
	glRotatef(-170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);
	glTranslatef(0.21f, 1.0f, 0.81f);
	glRotatef(-170.0f, 0.0f, 0.0f, 1.0f);
	drawHemisphere(0.05, 20, 20);
	glPopMatrix();

	//smile
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Color for the smile
	glTranslatef(0.0f, 0.7f, 0.36f); // Position the smile
	glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
	drawSmile();
	glPopMatrix();

}
void drawBodyBase() {
	GLUquadric* quad = gluNewQuadric();

	// Top green part
	glPushMatrix();
	glColor3f(0.0f, 1.0f, 0.0f); // Green
	glTranslatef(0.0f, 0.2f, 0.0f); // Cylinder position
	glRotatef(-90.0, 1.0, 0.0, 0.0); // Align with y-axis
	gluCylinder(quad, 0.5, 0.5, 0.4, 32, 20);
	glPopMatrix();

	//side hair
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Color for the fin
	glTranslatef(0.75f, 1.0f, 0.0f); // Position the fin on top of the head
	glRotatef(90.0f, 1.0f, 0.0f, 1.0f); // Rotate to align with the head
	drawSideHair(0.55f, 0.2f, 0.1f);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Color for the fin
	glTranslatef(-0.75f, 1.0f, 0.0f); // Position the fin on top of the head
	glRotatef(-90.0f, 1.0f, 0.0f, 1.0f); // Rotate to align with the head
	drawSideHair(0.55f, 0.2f, 0.1f);
	glPopMatrix();

	// Mid black part
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Black
	glTranslatef(0.0f, 0.0f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	gluCylinder(quad, 0.51, 0.51, 0.2, 32, 20);
	glPopMatrix();

	// Bottom green part
	glPushMatrix();
	glColor3f(0.0f, 1.0f, 0.0f); // Green
	glTranslatef(0.0f, -0.2f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	gluCylinder(quad, 0.5, 0.5, 0.4, 32, 20);
	glPopMatrix();

	// Right leg
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f); // White
	glTranslatef(-0.2f, -0.5f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	gluCylinder(quad, 0.25, 0.25, 0.6, 32, 32);
	glPopMatrix();

	// Right shoe
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Black
	glTranslatef(-0.2f, -0.48f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	glutSolidSphere(0.25, 32, 20);
	glPopMatrix();

	// Left leg
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f); // White
	glTranslatef(0.2f, -0.5f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	gluCylinder(quad, 0.25, 0.25, 0.6, 32, 32);
	glPopMatrix();

	// Left shoe
	glPushMatrix();
	glColor3f(0.0f, 0.0f, 0.0f); // Black
	glTranslatef(0.2f, -0.48f, 0.0f);
	glRotatef(-90.0, 1.0, 0.0, 0.0);
	glutSolidSphere(0.25, 32, 20);
	glPopMatrix();

	gluDeleteQuadric(quad);
}

void drawHand()
{
	GLUquadric* quad = gluNewQuadric();

	// Left hand
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f); // Skin tone
	glTranslatef(0.75f, 0.05f, 0.3f);
	glRotatef(-120.0, 1.0, 1.0, 0.0);
	gluCylinder(quad, 0.15, 0.1, 0.5, 32, 20);
	glPopMatrix();
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f); // Skin tone
	glTranslatef(0.75f, 0.05f, 0.3f);
	glutSolidSphere(0.15, 32, 20);
	glPopMatrix();

	// Right hand
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f); // Skin tone
	glTranslatef(-0.75f, 0.05f, 0.3f);
	glRotatef(-120.0, 1.0, -1.0, 0.0);
	gluCylinder(quad, 0.15, 0.1, 0.5, 32, 20);
	glPopMatrix();
	glPushMatrix();
	glColor3f(1.0f, 0.882f, 0.616f); // Skin tone
	glTranslatef(-0.75f, 0.05f, 0.3f);
	glutSolidSphere(0.15, 32, 20);
	glPopMatrix();
}

void drawCharacter()
{
	glTranslatef(0.0, 0.7, 0.0);
	drawHead();
	drawBodyBase();

	glPushMatrix();
	glTranslatef(0.0f, 0.3f, 0.0f);
	glRotatef(handRotation, 1.0f, 0.0f, 0.0f);
	glTranslatef(0.0f, -0.3f, 0.0f);
	drawHand();

	glPopMatrix();
}

void init() {

	GLfloat light_ambient[] = { 0.3, 0.3, 0.3, 1.0 };
	GLfloat light_diffuse[] = { 0.8, 0.8, 0.8, 1.0 };
	GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat light_position[] = { 80.0, 10.0, 10.0, 0.0 };

	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);

	glEnable(GL_COLOR_MATERIAL);
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

	glEnable(GL_SMOOTH);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glDepthFunc(GL_LEQUAL);
	glEnable(GL_DEPTH_TEST);

	glClearColor(1.0, 1.0, 1.0, 1.0);
	glColor3f(0.0, 1.0, 0.0);
}

void computePos(float deltaMove, float deltaStrafe, float deltaMoveY)
{
	x += deltaMove * lx * 0.1f;
	z += deltaMove * lz * 0.1f;
	x += deltaStrafe * -lz * 0.1f;
	z += deltaStrafe * lx * 0.1f;
	y += deltaMoveY * 0.1f;
}

void updateFly() {
	if (flyIncreasing) {
		fly += 0.003f;
		if (fly >= flyMax) {
			fly = flyMax;
			flyIncreasing = false;
		}
	}
	else {
		fly -= 0.002f;
		if (fly <= flyMin) {
			fly = flyMin;
			flyIncreasing = true;
		}
	}
}

void renderScene(void)
{
	if (deltaMove || deltaStrafe || deltaMoveY)
		computePos(deltaMove, deltaStrafe, deltaMoveY);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();
	gluLookAt(x, y, z,
		x + lx, y, z + lz,
		0.0f, 1.0f, 0.0f);

	//ground
	glColor3f(0.9f, 1.0f, 0.8f);
	glBegin(GL_QUADS);
	glVertex3f(-100.0f, 0.0f, -100.0f);
	glVertex3f(-100.0f, 0.0f, 100.0f);
	glVertex3f(100.0f, 0.0f, 100.0f);
	glVertex3f(100.0f, 0.0f, -100.0f);
	glEnd();

	if (value == 1) {
		glPushMatrix();
		glTranslatef(0.0, fly, 0.0);
		drawCharacter();
		glPopMatrix();
		
		// Update hand rotation with limits
		handRotation -= 0.1f;
		if (handRotation < handRotationMin) {
			handRotation = handRotationMin;
			updateFly();
		}
		else if (handRotation > handRotationMax) {
			handRotation = handRotationMax;
		}
	}
	else if (value == 2) {
		drawCharacter();
	}
	glFlush();
	glutSwapBuffers();
}

void timer(int value) {
	glutPostRedisplay(); // Request display update
	glutTimerFunc(16, timer, 0); // Set the next timer callback (approx. 60 FPS)
}

void menu(int num) {
	if (num == 0) {
		glutDestroyWindow(window);
		exit(0);
	}
	else {
		value = num;
	}
	glutPostRedisplay();
}

void createMenu(void) {
	menu_id = glutCreateMenu(menu);
	glutAddMenuEntry("Fly", 1);
	glutAddMenuEntry("Standing", 2);
	glutAddMenuEntry("Quit", 0);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
}

static void processNormalKeys(unsigned char key, int xx, int yy)
{
	switch (key) {
	case 'P':
	case 'p':
		PlaySoundA("C:\\Users\\User\\Downloads\\powerpuff_girls_theme.wav", NULL, SND_ASYNC);
		break;
	case 'S':
	case 's':
		PlaySoundA(NULL, 0, 0);
		break;
	}
}

void pressKey(int key, int xx, int yy)
{
	switch (key)
	{
	case GLUT_KEY_UP: deltaMove = 0.05f; break;
	case GLUT_KEY_DOWN: deltaMove = -0.05f; break;
	case GLUT_KEY_LEFT: deltaStrafe = -0.05f; break;
	case GLUT_KEY_RIGHT: deltaStrafe = 0.05f; break;
	case GLUT_KEY_PAGE_UP: deltaMoveY = 0.05f; break;
	case GLUT_KEY_PAGE_DOWN: deltaMoveY = -0.05f; break;
	}
}

void releaseKey(int key, int x, int y)
{
	switch (key)
	{
	case GLUT_KEY_UP:
	case GLUT_KEY_DOWN:
		deltaMove = 0;
		break;
	case GLUT_KEY_LEFT:
	case GLUT_KEY_RIGHT:
		deltaStrafe = 0;
		break;
	case GLUT_KEY_PAGE_UP:
	case GLUT_KEY_PAGE_DOWN:
		deltaMoveY = 0;
		break;
	}
}

void mouseMove(int x, int y)
{
	if (xOrigin >= 0)
	{
		deltaAngle = (x - xOrigin) * 0.001f;

		lx = sin(angle + deltaAngle);
		lz = -cos(angle + deltaAngle);
	}

	if (yOrigin >= 0)
	{
		y += (y - yOrigin) * 0.01f;
		yOrigin = y;
	}
}

void mouseButton(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON)
	{
		if (state == GLUT_UP)
		{
			angle += deltaAngle;
			xOrigin = -1;
			yOrigin = -1;
		}
		else
		{
			xOrigin = x;
			yOrigin = y;
		}
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(200, 100);
	glutInitWindowSize(600, 400);
	glutCreateWindow("Buttercup");
	init();
	createMenu();

	glClearColor(0.9, 0.9, 0.9, 0.5);
	glutDisplayFunc(renderScene);
	glutReshapeFunc(changeSize);
	glutIdleFunc(renderScene);
	glutTimerFunc(0, timer, 0);

	IDquadric = gluNewQuadric();

	glutIgnoreKeyRepeat(1);
	glutKeyboardFunc(processNormalKeys);
	glutSpecialFunc(pressKey);
	glutSpecialUpFunc(releaseKey);

	glutMouseFunc(mouseButton);
	glutMotionFunc(mouseMove);

	glEnable(GL_DEPTH_TEST);

	glutMainLoop();

	return 0;
}